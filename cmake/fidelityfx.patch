diff --git a/sdk/src/backends/vk/ffx_vk.cpp b/sdk/src/backends/vk/ffx_vk.cpp
index 604e777..e67455c 100644
--- a/sdk/src/backends/vk/ffx_vk.cpp
+++ b/sdk/src/backends/vk/ffx_vk.cpp
@@ -1006,6 +1006,8 @@ VkAccessFlags getVKAccessFlagsFromResourceState(FfxResourceStates state)
         return VK_ACCESS_NONE;
     case FFX_RESOURCE_STATE_RENDER_TARGET:
         return VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT | VK_ACCESS_COLOR_ATTACHMENT_READ_BIT;
+    case FfxResourceStates(1 << 9):
+        return VK_ACCESS_SHADER_READ_BIT;
     default:
         FFX_ASSERT_MESSAGE(false, "State flag not yet supported");
         return VK_ACCESS_SHADER_READ_BIT;
@@ -1032,6 +1034,8 @@ VkPipelineStageFlags getVKPipelineStageFlagsFromResourceState(FfxResourceStates
         return VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT;
     case FFX_RESOURCE_STATE_RENDER_TARGET:
         return VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
+    case FfxResourceStates(1 << 9):
+        return VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;
     default:
         FFX_ASSERT_MESSAGE(false, "Pipeline stage flag not yet supported");
         return VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;
@@ -1060,6 +1064,8 @@ VkImageLayout getVKImageLayoutFromResourceState(FfxResourceStates state)
         return VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
     case FFX_RESOURCE_STATE_RENDER_TARGET:
         return VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
+    case FfxResourceStates(1 << 9):
+        return VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL;
     case FFX_RESOURCE_STATE_INDIRECT_ARGUMENT:
         // this case is for buffers
     default:
@@ -1779,7 +1785,7 @@ FfxErrorCode CreateBackendContextVK(FfxInterface* backendInterface, FfxEffect ef
 
                 descriptorPoolCreateInfo.sType         = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
                 descriptorPoolCreateInfo.pNext         = nullptr;
-                descriptorPoolCreateInfo.flags         = 0;
+                descriptorPoolCreateInfo.flags         = VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT;
                 descriptorPoolCreateInfo.poolSizeCount = poolSizeCount;
                 descriptorPoolCreateInfo.pPoolSizes    = poolSizes;
                 descriptorPoolCreateInfo.maxSets       = poolSizeCount;
@@ -4141,9 +4147,9 @@ FfxErrorCode ExecuteGpuJobsVK(FfxInterface* backendInterface, FfxCommandList com
         FfxGpuJobDescription* gpuJob = &backendContext->pGpuJobs[i];
 
         // If we have a label for the job, drop a marker for it
-        if (gpuJob->jobLabel[0]) {
-            beginMarkerVK(backendContext, vkCommandBuffer, gpuJob->jobLabel);
-        }
+        // if (gpuJob->jobLabel[0]) {
+        //     beginMarkerVK(backendContext, vkCommandBuffer, gpuJob->jobLabel);
+        // }
 
         
         switch (gpuJob->jobType)
@@ -4171,9 +4177,9 @@ FfxErrorCode ExecuteGpuJobsVK(FfxInterface* backendInterface, FfxCommandList com
         default:;
         }
 
-        if (gpuJob->jobLabel[0]) {
-            endMarkerVK(backendContext, vkCommandBuffer);
-        }
+        // if (gpuJob->jobLabel[0]) {
+        //     endMarkerVK(backendContext, vkCommandBuffer);
+        // }
     }
 
     // check the execute function returned cleanly.
