diff --git a/sdk/tools/ffx_shader_compiler/CMakeLists.txt b/sdk/tools/ffx_shader_compiler/CMakeLists.txt
index 892685f..c90231e 100644
--- a/sdk/tools/ffx_shader_compiler/CMakeLists.txt
+++ b/sdk/tools/ffx_shader_compiler/CMakeLists.txt
@@ -25,14 +25,21 @@ cmake_minimum_required(VERSION 3.17)
 
 project(FidelityFX_SC)
 
+find_package(tiny-process-library CONFIG REQUIRED)
+
+include(CMakePackageConfigHelpers)
+include(GNUInstallDirs)
+
 # Enable multi-threaded compilation
-add_compile_options(/MP)
+# add_compile_options(/MP)
 
 # General language options (require language standards specified)
 set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 set(CMAKE_CXX_EXTENSIONS OFF)
 
+add_definitions(/D_CRT_SECURE_NO_WARNINGS)
+
 # Get warnings for everything
 if (CMAKE_COMPILER_IS_GNUCC)
     set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -Wall")
@@ -45,14 +52,12 @@ if (CMAKE_GENERATOR_PLATFORM STREQUAL x64 OR
     CMAKE_GENERATOR_PLATFORM STREQUAL ARM64 OR
     CMAKE_GENERATOR_PLATFORM STREQUAL ARM64EC)
 	#Set so taken by default when creating custom configs
-	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
-	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
 endif()
 
 # Check for Visual Studio 2019's build tooling
-if(MSVC_TOOLSET_VERSION VERSION_LESS 142)
-    message(FATAL_ERROR "Cannot find MSVC toolset version 142 or greater. Please make sure Visual Studio 2019 or newer installed")
-endif()
+# if(MSVC_TOOLSET_VERSION VERSION_LESS 142)
+#     message(FATAL_ERROR "Cannot find MSVC toolset version 142 or greater. Please make sure Visual Studio 2019 or newer installed")
+# endif()
 
 # Generate the output binary in the /bin directory
 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/bin)
@@ -109,10 +114,8 @@ endfunction()
 
 # Set sources
 file(GLOB sources
-	"${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp"
-	"${CMAKE_CURRENT_SOURCE_DIR}/src/*.c"
-	"${CMAKE_CURRENT_SOURCE_DIR}/src/*.h"
-	"${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp")
+	"${CMAKE_CURRENT_SOURCE_DIR}/src/ffx_sc.cpp"
+    "${CMAKE_CURRENT_SOURCE_DIR}/src/glsl_compiler.cpp")
 
 # Append lib sources
 list(APPEND sources
@@ -124,15 +127,42 @@ list(APPEND sources
 # Setup target binary
 add_executable(${PROJECT_NAME} ${sources})
 target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17)
+set_target_properties(${PROJECT_NAME} PROPERTIES
+    MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL")
 
 # Add external libs
-add_subdirectory(libs/agilitysdk)
-add_subdirectory(libs/dxc)
-add_subdirectory(libs/glslangValidator)
-add_subdirectory(libs/tiny-process-library)
+# add_subdirectory(libs/agilitysdk)
+# add_subdirectory(libs/dxc)
+# add_subdirectory(libs/glslangValidator)
+# add_subdirectory(libs/tiny-process-library)
 
 # Add link time dependencies
-target_link_libraries (${PROJECT_NAME} dxguid agilitysdk dxc glslangValidator tiny-process-library)
-target_include_directories (${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/libs/MD5
-                                                   ${CMAKE_CURRENT_SOURCE_DIR}/libs/SPIRV-Reflect
-                                                   ${CMAKE_CURRENT_SOURCE_DIR}/libs/tiny-process-library)
+# target_link_libraries (${PROJECT_NAME} dxguid agilitysdk dxc glslangValidator tiny-process-library)
+# target_link_libraries (${PROJECT_NAME} tiny-process-library)
+# target_include_directories (${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/libs/MD5
+#                                                    ${CMAKE_CURRENT_SOURCE_DIR}/libs/SPIRV-Reflect
+#                                                    ${CMAKE_CURRENT_SOURCE_DIR}/libs/tiny-process-library)
+target_link_libraries(${PROJECT_NAME} PRIVATE tiny-process-library::tiny-process-library)
+
+configure_package_config_file(
+    "${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}-config.cmake.in" 
+    "${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
+    INSTALL_DESTINATION "${CMAKE_INSTALL_DATADIR}/cmake/${PROJECT_NAME}"
+    NO_SET_AND_CHECK_MACRO
+    NO_CHECK_REQUIRED_COMPONENTS_MACRO)
+
+write_basic_package_version_file(${PROJECT_NAME}-config-version.cmake
+    VERSION 1.1.3
+    COMPATIBILITY SameMajorVersion)
+
+install(TARGETS ${PROJECT_NAME} 
+    EXPORT ${PROJECT_NAME}-targets
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+install(EXPORT ${PROJECT_NAME}-targets
+    DESTINATION "${CMAKE_INSTALL_DATADIR}/cmake/${PROJECT_NAME}"
+    NAMESPACE ${PROJECT_NAME}::)
+install(
+    FILES
+      "${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
+      "${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
+    DESTINATION ${CMAKE_INSTALL_DATADIR}/cmake/${PROJECT_NAME})
diff --git a/sdk/tools/ffx_shader_compiler/FidelityFX_SC-config.cmake.in b/sdk/tools/ffx_shader_compiler/FidelityFX_SC-config.cmake.in
new file mode 100644
index 0000000..72450c4
--- /dev/null
+++ b/sdk/tools/ffx_shader_compiler/FidelityFX_SC-config.cmake.in
@@ -0,0 +1,2 @@
+@PACKAGE_INIT@
+include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake")
diff --git a/sdk/tools/ffx_shader_compiler/src/compiler.h b/sdk/tools/ffx_shader_compiler/src/compiler.h
index febc3eb..bae59bb 100644
--- a/sdk/tools/ffx_shader_compiler/src/compiler.h
+++ b/sdk/tools/ffx_shader_compiler/src/compiler.h
@@ -119,7 +119,7 @@ struct Permutation
     std::string                         hashDigest;                 ///< Shader permutation hash key.
     std::string                         name;                       ///< Shader permutation name.
     std::string                         headerFileName;             ///< Shader permutation header file name.
-    std::vector<std::wstring>           defines;                    ///< Shader permutation defines.
+    std::vector<std::string>            defines;                    ///< Shader permutation defines.
     std::shared_ptr<IShaderBinary>      shaderBinary = nullptr;     ///< Shader permutation compiled binary data.
     std::shared_ptr<IReflectionData>    reflectionData = nullptr;   ///< Shader permutation <c><i>IReflectionData</i></c> data.
 
diff --git a/sdk/tools/ffx_shader_compiler/src/ffx_sc.cpp b/sdk/tools/ffx_shader_compiler/src/ffx_sc.cpp
index c3ec37f..c65a843 100644
--- a/sdk/tools/ffx_shader_compiler/src/ffx_sc.cpp
+++ b/sdk/tools/ffx_shader_compiler/src/ffx_sc.cpp
@@ -20,52 +20,44 @@
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 
-#include "hlsl_compiler.h"
+// #include "hlsl_compiler.h"
 #include "glsl_compiler.h"
 #include "utils.h"
 
-#include <Windows.h>
-#include <pathcch.h>
+// #include <Windows.h>
+// #include <pathcch.h>
 #include <vector>
 #include <string_view>
 #include <filesystem>
 #include <unordered_set>
 #include <locale>
 #include <stdexcept>
+#include <string.h>
+#include <cmath>
 
 
-#pragma comment(lib, "pathcch.lib")
+// #pragma comment(lib, "pathcch.lib")
 
-static const wchar_t* const APP_NAME    = L"FidelityFX-SC";
-static const wchar_t* const EXE_NAME    = L"FidelityFX_SC";
-static const wchar_t* const APP_VERSION = L"1.0.0";
-
-inline bool Contains(std::wstring_view s, std::wstring_view subS)
-{
-    return s.find(subS) != s.npos;
-}
+static const char* const APP_NAME    = "FidelityFX-SC";
+static const char* const EXE_NAME    = "FidelityFX_SC";
+static const char* const APP_VERSION = "1.0.0";
 
 inline bool Contains(std::string_view s, std::string_view subS)
 {
     return s.find(subS) != s.npos;
 }
 
-inline bool StartsWith(std::wstring_view s, std::wstring_view subS)
-{
-    return s.substr(0, subS.size()) == subS;
-}
-
 inline bool StartsWith(std::string_view s, std::string_view subS)
 {
     return s.substr(0, subS.size()) == subS;
 }
 
-inline void Split(std::wstring str, std::wstring_view token, std::vector<std::wstring>& result)
+inline void Split(std::string str, std::string_view token, std::vector<std::string>& result)
 {
     while (str.size())
     {
-        int index = str.find(token);
-        if (index != std::wstring::npos)
+        auto index = str.find(token);
+        if (index != std::string::npos)
         {
             result.push_back(str.substr(0, index));
             str = str.substr(index + token.size());
@@ -75,14 +67,14 @@ inline void Split(std::wstring str, std::wstring_view token, std::vector<std::ws
         else
         {
             result.push_back(str);
-            str = L"";
+            str = "";
         }
     }
 }
 
-inline bool IsNumeric(std::wstring_view s)
+inline bool IsNumeric(std::string_view s)
 {
-    for (wchar_t c : s)
+    for (char c : s)
         if (!std::isdigit(c))
             return false;
     return !s.empty();
@@ -90,9 +82,9 @@ inline bool IsNumeric(std::wstring_view s)
 
 struct PermutationOption
 {
-    std::wstring              definition;
+    std::string               definition;
     std::string               definitionUtf8;
-    std::vector<std::wstring> values;
+    std::vector<std::string>  values;
     uint32_t                  numBits;
     bool                      isNumeric;
     bool                      foundInShader = false;
@@ -101,15 +93,15 @@ struct PermutationOption
 struct LaunchParameters
 {
     std::vector<PermutationOption> permutationOptions;
-    std::vector<std::wstring>      compilerArgs;
-    std::wstring                   ouputPath;
-    std::wstring                   inputFile;
-    std::wstring                   shaderName;
-    std::wstring                   compiler;
-    std::wstring                   dxcDll;
-    std::wstring                   d3dDll;
-    std::wstring                   glslangExe;
-    std::wstring                   deps;
+    std::vector<std::string>       compilerArgs;
+    std::string                    ouputPath;
+    std::string                    inputFile;
+    std::string                    shaderName;
+    std::string                    compiler;
+    std::string                    dxcDll;
+    std::string                    d3dDll;
+    std::string                    glslangExe;
+    std::string                    deps;
     int                            numThreads         = 0;
     bool                           generateReflection = false;
     bool                           embedArguments     = false;
@@ -118,13 +110,13 @@ struct LaunchParameters
     bool                           debugCompile       = false;
 
     static void PrintCommandLineSyntax();
-    void        ParseCommandLine(int argCount, const wchar_t* const* args);
+    void        ParseCommandLine(int argCount, const char* const* args);
 
 private:
-    static void ParsePermutationOption(PermutationOption& outPermutationOption, const std::wstring arg);
-    static void ParseString(std::wstring& outCompilerArg, const wchar_t* arg);
-    static void ParseNumThreads(int& outNumThreads, const wchar_t* arg);
-    static void EnsureOutputPathExistsAndMakeCanonical(std::wstring & inoutOutputPath);
+    static void ParsePermutationOption(PermutationOption& outPermutationOption, const std::string arg);
+    static void ParseString(std::string& outCompilerArg, const char* arg);
+    static void ParseNumThreads(int& outNumThreads, const char* arg);
+    static void EnsureOutputPathExistsAndMakeCanonical(std::string & inoutOutputPath);
 };
 
 class Application
@@ -139,8 +131,8 @@ private:
     int                                  m_LastPermutationIndex = 0;
     std::unordered_map<int, int>         m_KeyToIndexMap;
     std::unordered_map<std::string, int> m_HashToIndexMap;
-    std::wstring                         m_ShaderFileName;
-    std::wstring                         m_ShaderName;
+    std::string                          m_ShaderFileName;
+    std::string                          m_ShaderName;
 
 public:
     Application(const LaunchParameters& params);
@@ -150,7 +142,7 @@ public:
     void Process();
 
 private:
-    static std::wstring MakeFullPath(const std::wstring& outputPath, const std::wstring& fileName);
+    static std::string MakeFullPath(const std::string& outputPath, const std::string& fileName);
     void GenerateMacroPermutations(std::deque<Permutation>& permutations);
     void GenerateMacroPermutations(Permutation current, std::deque<Permutation>& permutations, int idx, int curBit);
     void OpenSourceFile();
@@ -165,84 +157,84 @@ private:
 
 void LaunchParameters::PrintCommandLineSyntax()
 {
-    wprintf(L"%ls %ls\n", APP_NAME, APP_VERSION);
-    wprintf(L"Command line syntax:\n");
-    wprintf(L"  %ls.exe [Options] <InputFile>\n", EXE_NAME);
-    wprintf(
-        L"Options:\n"
-        L"<CompilerArgs>\n"
-        L"  A list of arguments accepted by the target compiler, separated by spaces.\n"
-        L"-output=<Path>\n"
-        L"  Path to where the shader permutations should be output to.\n"
-        L"-D<Name>\n"
-        L"  Define a macro that is defined in all shader permutations.\n"
-        L"-D<Name>={<Value1>, <Value2>, <Value3> ...}\n"
-        L"  Declare a shader option that will generate permutations with the macro defined using the given values.\n"
-        L"  Use a '-' to define a permutation where no macro is defined.\n"
-        L"-num-threads=<Num>\n"
-        L"  Number of threads to use for generating shaders.\n"
-        L"  Sets to the max number of threads available on the current CPU by default.\n"
-        L"-name=<Name>\n"
-        L"  The name used for prefixing variables in the generated headers.\n"
-        L"  Uses the file name by default.\n"
-        L"-reflection\n"
-        L"  Generate header containing reflection data.\n"
-        L"-embed-arguments\n"
-        L"  Write the compile arguments used for each permutation into their respective headers.\n"
-        L"-print-arguments\n"
-        L"  Print the compile arguments used for each permuations.\n"
-        L"-disable-logs\n"
-        L"  Prevent logging of compile warnings and errors.\n"
-        L"-compiler=<Compiler>\n"
-        L"  Select the compiler to generate permutations from (dxc, gdk.scarlett.x64, gdk.xboxone.x64, fxc, or glslang).\n"
-        L"-dxcdll=<DXC DLL Path>\n"
-        L"  Path to the dxccompiler dll to use.\n"
-        L"-d3ddll=<D3D DLL Path>\n"
-        L"  Path to the d3dcompiler dll to use.\n"
-        L"-glslangexe=<glslangValidator.exe Path>\n"
-        L"  Path to the glslangValidator executable to use.\n"
-        L"-deps=<Format>\n"
-        L"  Dump depfile which recorded the include file dependencies in format of (gcc or msvc).\n"
-        L"-debugcompile\n"
-        L"  Compile shader with debug information.\n"
-        L"-debugcmdline\n"
-        L"  Print all the input arguments.\n"
+    printf("%s %s\n", APP_NAME, APP_VERSION);
+    printf("Command line syntax:\n");
+    printf("  %s.exe [Options] <InputFile>\n", EXE_NAME);
+    printf(
+        "Options:\n"
+        "<CompilerArgs>\n"
+        "  A list of arguments accepted by the target compiler, separated by spaces.\n"
+        "-output=<Path>\n"
+        "  Path to where the shader permutations should be output to.\n"
+        "-D<Name>\n"
+        "  Define a macro that is defined in all shader permutations.\n"
+        "-D<Name>={<Value1>, <Value2>, <Value3> ...}\n"
+        "  Declare a shader option that will generate permutations with the macro defined using the given values.\n"
+        "  Use a '-' to define a permutation where no macro is defined.\n"
+        "-num-threads=<Num>\n"
+        "  Number of threads to use for generating shaders.\n"
+        "  Sets to the max number of threads available on the current CPU by default.\n"
+        "-name=<Name>\n"
+        "  The name used for prefixing variables in the generated headers.\n"
+        "  Uses the file name by default.\n"
+        "-reflection\n"
+        "  Generate header containing reflection data.\n"
+        "-embed-arguments\n"
+        "  Write the compile arguments used for each permutation into their respective headers.\n"
+        "-print-arguments\n"
+        "  Print the compile arguments used for each permuations.\n"
+        "-disable-logs\n"
+        "  Prevent logging of compile warnings and errors.\n"
+        "-compiler=<Compiler>\n"
+        "  Select the compiler to generate permutations from (dxc, gdk.scarlett.x64, gdk.xboxone.x64, fxc, or glslang).\n"
+        "-dxcdll=<DXC DLL Path>\n"
+        "  Path to the dxccompiler dll to use.\n"
+        "-d3ddll=<D3D DLL Path>\n"
+        "  Path to the d3dcompiler dll to use.\n"
+        "-glslangexe=<glslangValidator.exe Path>\n"
+        "  Path to the glslangValidator executable to use.\n"
+        "-deps=<Format>\n"
+        "  Dump depfile which recorded the include file dependencies in format of (gcc or msvc).\n"
+        "-debugcompile\n"
+        "  Compile shader with debug information.\n"
+        "-debugcmdline\n"
+        "  Print all the input arguments.\n"
     );
 }
 
-void LaunchParameters::ParseCommandLine(int argCount, const wchar_t* const* args)
+void LaunchParameters::ParseCommandLine(int argCount, const char* const* args)
 {
     int i = 0;
 
     // For easier debugging
-    std::wstring debugOutput = L"FidelityFX_SC.exe Output:";
-    debugOutput += L"\r\n";
+    std::string debugOutput = "FidelityFX_SC Output:";
+    debugOutput += "\r\n";
     for (int count = 0; count < argCount; ++count)
     {
         // If we want to debug cmd line, don't include the debug cmd in what is spit out (since it's not needed)
-        if (!wcscmp(args[count], L"-debugcmdline"))
+        if (!strcmp(args[count], "-debugcmdline"))
             continue;
 
         debugOutput += args[count];
-        debugOutput += L" ";
+        debugOutput += " ";
     }
-    debugOutput += L"\r\n";
+    debugOutput += "\r\n";
 
     // Options
     for (; i < argCount; ++i)
     {
-        if (StartsWith(args[i], L"-D"))
+        if (StartsWith(args[i], "-D"))
         {
-            if (Contains(args[i], L"{"))
+            if (Contains(args[i], "{"))
             {
-                std::wstring allPermutationOptionValues;
+                std::string allPermutationOptionValues;
 
                 // Keep appending the next few arguments which should be the macro values until we hit the closing brace.
                 for (; i < argCount; i++)
                 {
                     allPermutationOptionValues += args[i];
 
-                    if (Contains(args[i], L"}"))
+                    if (Contains(args[i], "}"))
                         break;
                 }
 
@@ -252,38 +244,38 @@ void LaunchParameters::ParseCommandLine(int argCount, const wchar_t* const* args
             }
             else
             {
-                compilerArgs.push_back(L"-D");
-                std::wstring arg = std::wstring(args[i]);
+                compilerArgs.push_back("-D");
+                std::string arg = std::string(args[i]);
                 compilerArgs.push_back(arg.substr(2, arg.size() - 2));
             }
         }
-        else if (StartsWith(args[i], L"-debugcmdline"))
-            wprintf(debugOutput.c_str());
-        else if (StartsWith(args[i], L"-num-threads"))
+        else if (StartsWith(args[i], "-debugcmdline"))
+            {} // printf(debugOutput.c_str());
+        else if (StartsWith(args[i], "-num-threads"))
             ParseNumThreads(numThreads, args[i]);
-        else if (StartsWith(args[i], L"-output"))
+        else if (StartsWith(args[i], "-output"))
             ParseString(ouputPath, args[i]);
-        else if (StartsWith(args[i], L"-name"))
+        else if (StartsWith(args[i], "-name"))
             ParseString(shaderName, args[i]);
-        else if (StartsWith(args[i], L"-compiler"))
+        else if (StartsWith(args[i], "-compiler"))
             ParseString(compiler, args[i]);
-        else if (StartsWith(args[i], L"-dxcdll"))
+        else if (StartsWith(args[i], "-dxcdll"))
             ParseString(dxcDll, args[i]);
-        else if (StartsWith(args[i], L"-d3ddll"))
+        else if (StartsWith(args[i], "-d3ddll"))
             ParseString(d3dDll, args[i]);
-        else if (StartsWith(args[i], L"-glslangexe"))
+        else if (StartsWith(args[i], "-glslangexe"))
             ParseString(glslangExe, args[i]);
-        else if (StartsWith(args[i], L"-deps"))
+        else if (StartsWith(args[i], "-deps"))
             ParseString(deps, args[i]);
-        else if (std::wstring(args[i]) == L"-reflection")
+        else if (std::string(args[i]) == "-reflection")
             generateReflection = true;
-        else if (std::wstring(args[i]) == L"-embed-arguments")
+        else if (std::string(args[i]) == "-embed-arguments")
             embedArguments = true;
-        else if (std::wstring(args[i]) == L"-print-arguments")
+        else if (std::string(args[i]) == "-print-arguments")
             printArguments = true;
-        else if (std::wstring(args[i]) == L"-disable-logs")
+        else if (std::string(args[i]) == "-disable-logs")
             disableLogs = true;
-        else if (std::wstring(args[i]) == L"-debugcompile")
+        else if (std::string(args[i]) == "-debugcompile")
             debugCompile = true;
         else if (args[i][0] == L'-')
         {
@@ -307,53 +299,21 @@ void LaunchParameters::ParseCommandLine(int argCount, const wchar_t* const* args
     EnsureOutputPathExistsAndMakeCanonical(ouputPath);
 }
 
-void LaunchParameters::EnsureOutputPathExistsAndMakeCanonical(std::wstring& inoutOutputPath)
+void LaunchParameters::EnsureOutputPathExistsAndMakeCanonical(std::string& inoutOutputPath)
 {
-    std::replace(inoutOutputPath.begin(), inoutOutputPath.end(), L'/', L'\\');
-
-    PWSTR canonicalOutputPath = NULL;
-
-    // Make the path canonical, convert to long path if needed and add the trailing slash
-    HRESULT hr = PathAllocCanonicalize(inoutOutputPath.c_str(), PATHCCH_ALLOW_LONG_PATHS | PATHCCH_ENSURE_TRAILING_SLASH, &canonicalOutputPath);
-    if (hr == S_OK)
-    {
-        PWSTR componentStart = NULL;
-
-        // Find the first character after "root" indicator -- which means a folder (path component) or file
-        hr = PathCchSkipRoot(canonicalOutputPath, &componentStart);
-        if (hr == S_OK)
-        {
-            // Try search for the next delimiter
-            wchar_t* componentEnd = wcsstr(componentStart, L"\\");
-
-            // If the delimiter is found, make sure the folder is created
-            while (componentEnd != NULL)
-            {
-                // Temporally replace delimiter '\\' with null-terminator, create directory, and restore the delimiter
-                *componentEnd = L'\0';
-                CreateDirectoryW(canonicalOutputPath, NULL);
-                *componentEnd = L'\\';
-
-                // advance to the next component (file or folder) and try to find the next delimiter (meaning -- it's folder), and repeat the loop.
-                componentStart = componentEnd + 1;
-                componentEnd = wcsstr(componentStart, L"\\");
-            }
-        }
-        inoutOutputPath = canonicalOutputPath;
-        LocalFree(canonicalOutputPath);
-    }
+    inoutOutputPath = std::filesystem::canonical(inoutOutputPath).string();
 }
 
-void LaunchParameters::ParsePermutationOption(PermutationOption& outPermutationOption, const std::wstring arg)
+void LaunchParameters::ParsePermutationOption(PermutationOption& outPermutationOption, const std::string arg)
 {
-    size_t equalPos                 = arg.find_first_of(L"=", 0);
+    size_t equalPos                 = arg.find_first_of("=", 0);
     outPermutationOption.definition = arg.substr(2, equalPos - 2);
-    outPermutationOption.definitionUtf8 = WCharToUTF8(outPermutationOption.definition);
+    outPermutationOption.definitionUtf8 = outPermutationOption.definition;
 
-    size_t       openBracePos      = arg.find_first_of(L"{", 0);
-    std::wstring multiOptionSubStr = arg.substr(openBracePos + 1, arg.length() - openBracePos - 2);
+    size_t       openBracePos      = arg.find_first_of("{", 0);
+    std::string multiOptionSubStr = arg.substr(openBracePos + 1, arg.length() - openBracePos - 2);
 
-    Split(multiOptionSubStr, L",", outPermutationOption.values);
+    Split(multiOptionSubStr, ",", outPermutationOption.values);
 
     outPermutationOption.isNumeric = true;
 
@@ -373,18 +333,18 @@ void LaunchParameters::ParsePermutationOption(PermutationOption& outPermutationO
     outPermutationOption.numBits = static_cast<uint32_t>(ceilf(log2f(static_cast<float>(outPermutationOption.values.size()))));
 }
 
-void LaunchParameters::ParseString(std::wstring& outCompilerArg, const wchar_t* arg)
+void LaunchParameters::ParseString(std::string& outCompilerArg, const char* arg)
 {
-    std::wstring argStr   = std::wstring(arg);
-    size_t       equalPos = argStr.find_first_of(L"=", 0);
-    outCompilerArg        = argStr.substr(equalPos + 1, argStr.length() - equalPos);
+    std::string argStr   = std::string(arg);
+    size_t      equalPos = argStr.find_first_of("=", 0);
+    outCompilerArg       = argStr.substr(equalPos + 1, argStr.length() - equalPos);
 }
 
-void LaunchParameters::ParseNumThreads(int& outNumThreads, const wchar_t* arg)
+void LaunchParameters::ParseNumThreads(int& outNumThreads, const char* arg)
 {
-    std::wstring argStr   = std::wstring(arg);
-    size_t       equalPos = argStr.find_first_of(L"=", 0);
-    outNumThreads         = std::stoi(argStr.substr(equalPos + 1, argStr.length() - equalPos));
+    std::string argStr   = std::string(arg);
+    size_t      equalPos = argStr.find_first_of("=", 0);
+    outNumThreads        = std::stoi(argStr.substr(equalPos + 1, argStr.length() - equalPos));
 }
 
 Application::Application(const LaunchParameters& params)
@@ -406,7 +366,7 @@ void Application::Process()
         m_Params.numThreads = std::thread::hardware_concurrency();
     m_Params.numThreads = std::min(m_Params.numThreads, static_cast<int>(totalPermutations - predictedDuplicates));
 
-    printf("%s\n", WCharToUTF8(m_ShaderFileName).c_str());
+    printf("%s\n", m_ShaderFileName.c_str());
 
     for (int i = 0; i < (m_Params.numThreads - 1); i++)
         threads.push_back(std::thread(&Application::ProcessPermutations, this));
@@ -419,41 +379,31 @@ void Application::Process()
     WriteShaderPermutationsHeader();
 
     // dump dependencies file if needed
-    if (m_Params.deps == L"gcc")
+    if (m_Params.deps == "gcc")
         DumpDepfileGCC();
-    else if (m_Params.deps == L"msvc")
+    else if (m_Params.deps == "msvc")
         DumpDepfileMSVC();
 
     printf("%s: Processed %zu shader permutations, found %zu duplicates (%zu found early).\n",
-           WCharToUTF8(m_ShaderFileName).c_str(),
+           m_ShaderFileName.c_str(),
            totalPermutations,
            totalPermutations - size_t(m_LastPermutationIndex),
            predictedDuplicates);
     if (totalPermutations - m_LastPermutationIndex < predictedDuplicates)
     {
-        printf("\nERROR: Predicted %llu duplicates\n\n\n", predictedDuplicates);
+        printf("\nERROR: Predicted %llu duplicates\n\n\n", (unsigned long long) predictedDuplicates);
     }
 }
 
-std::wstring Application::MakeFullPath(const std::wstring & outputPath, const std::wstring & fileName)
+std::string Application::MakeFullPath(const std::string & outputPath, const std::string & fileName)
 {
-    // Append file name, optionally converting to long path again, because the outputPath alone could be normal path, but when filename is added -- it could become a long path
-    PWSTR canonicalFileNameRaw = NULL;
-    HRESULT hr = PathAllocCombine(outputPath.c_str(), fileName.c_str(), PATHCCH_ALLOW_LONG_PATHS, &canonicalFileNameRaw);
-
-    if (S_OK == hr)
-    {
-        std::wstring canonicalFileName(canonicalFileNameRaw);
-        LocalFree(canonicalFileNameRaw);
-        return canonicalFileName;
-    }
-    return fileName;
+    return (std::filesystem::path(outputPath) / fileName).string();
 }
 
 void Application::GenerateMacroPermutations(std::deque<Permutation>& permutations)
 {
     Permutation temp;
-    temp.sourcePath = WCharToUTF8(m_Params.inputFile);
+    temp.sourcePath = m_Params.inputFile;
     // put the permutation options that appear in shaders first.
     std::stable_partition(m_Params.permutationOptions.begin(), m_Params.permutationOptions.end(), [](const PermutationOption& opt) { return opt.foundInShader; });
     GenerateMacroPermutations(temp, permutations, 0, 0);
@@ -485,12 +435,12 @@ void Application::GenerateMacroPermutations(Permutation current, std::deque<Perm
         {
             if (currentOption.isNumeric)
             {
-                temp.defines.push_back(L"-D");
-                temp.defines.push_back(currentOption.definition + L"=" + currentOption.values[i]);
+                temp.defines.push_back("-D");
+                temp.defines.push_back(currentOption.definition + "=" + currentOption.values[i]);
             }
             else
             {
-                temp.defines.push_back(L"-D");
+                temp.defines.push_back("-D");
                 temp.defines.push_back(currentOption.values[i]);
             }
         }
@@ -524,11 +474,11 @@ void Application::OpenSourceFile()
 {
     size_t slashPos     = m_Params.inputFile.find_last_of('/');
 
-    if (slashPos == std::wstring::npos)
+    if (slashPos == std::string::npos)
     {
         slashPos = m_Params.inputFile.find_last_of('\\');
 
-        if (slashPos == std::wstring::npos)
+        if (slashPos == std::string::npos)
             slashPos = 0;
     }
 
@@ -543,43 +493,43 @@ void Application::OpenSourceFile()
     else
         m_ShaderName = m_Params.shaderName;
 
-    std::string dxcDll         = WCharToUTF8(m_Params.dxcDll);
-    std::string d3dDll         = WCharToUTF8(m_Params.d3dDll);
-    std::string glslangExe     = WCharToUTF8(m_Params.glslangExe);
-    std::string shaderPath     = WCharToUTF8(m_Params.inputFile);
-    std::string shaderName     = WCharToUTF8(m_ShaderName);
-    std::string shaderFileName = WCharToUTF8(m_ShaderFileName);
-    std::string outputPath     = WCharToUTF8(m_Params.ouputPath);
+    std::string dxcDll         = m_Params.dxcDll;
+    std::string d3dDll         = m_Params.d3dDll;
+    std::string glslangExe     = m_Params.glslangExe;
+    std::string shaderPath     = m_Params.inputFile;
+    std::string shaderName     = m_ShaderName;
+    std::string shaderFileName = m_ShaderFileName;
+    std::string outputPath     = m_Params.ouputPath;
 
     if (m_Params.compiler.empty())
     {
         // Check file extension
         size_t       extensionPos = m_Params.inputFile.find_last_of('.');
-        std::wstring extension    = m_Params.inputFile.substr(extensionPos + 1, m_Params.inputFile.size() - extensionPos - 1);
+        std::string extension    = m_Params.inputFile.substr(extensionPos + 1, m_Params.inputFile.size() - extensionPos - 1);
 
-        if (extension == L"hlsl")
-            m_Compiler = std::unique_ptr<HLSLCompiler>(
-                new HLSLCompiler(HLSLCompiler::DXC, dxcDll, shaderPath, shaderName, shaderFileName, outputPath, m_Params.disableLogs, m_Params.debugCompile));
-        else if (extension == L"glsl")
+        //if (extension == "hlsl")
+        //    m_Compiler = std::unique_ptr<HLSLCompiler>(
+        //        new HLSLCompiler(HLSLCompiler::DXC, dxcDll, shaderPath, shaderName, shaderFileName, outputPath, m_Params.disableLogs, m_Params.debugCompile));
+        if (extension == "glsl")
             m_Compiler = std::unique_ptr<GLSLCompiler>(new GLSLCompiler(glslangExe, shaderPath, shaderName, shaderFileName, outputPath, m_Params.disableLogs, m_Params.debugCompile));
         else
             throw std::runtime_error("Unknown shader source file extension. Please use the -compiler option to specify which compiler to use.");
     }
     else
     {
-        if (m_Params.compiler == L"dxc")
-            m_Compiler = std::unique_ptr<HLSLCompiler>(
-                new HLSLCompiler(HLSLCompiler::DXC, dxcDll, shaderPath, shaderName, shaderFileName, outputPath, m_Params.disableLogs, m_Params.debugCompile));
-        else if (m_Params.compiler == L"gdk.scarlett.x64")
-            m_Compiler = std::unique_ptr<HLSLCompiler>(new HLSLCompiler(
-                HLSLCompiler::GDK_SCARLETT_X64, dxcDll, shaderPath, shaderName, shaderFileName, outputPath, m_Params.disableLogs, m_Params.debugCompile));
-        else if (m_Params.compiler == L"gdk.xboxone.x64")
-            m_Compiler = std::unique_ptr<HLSLCompiler>(new HLSLCompiler(
-                HLSLCompiler::GDK_XBOXONE_X64, dxcDll, shaderPath, shaderName, shaderFileName, outputPath, m_Params.disableLogs, m_Params.debugCompile));
-        else if (m_Params.compiler == L"fxc")
-            m_Compiler = std::unique_ptr<HLSLCompiler>(
-                new HLSLCompiler(HLSLCompiler::FXC, d3dDll, shaderPath, shaderName, shaderFileName, outputPath, m_Params.disableLogs, m_Params.debugCompile));
-        else if (m_Params.compiler == L"glslang")
+        // if (m_Params.compiler == "dxc")
+        //     m_Compiler = std::unique_ptr<HLSLCompiler>(
+        //         new HLSLCompiler(HLSLCompiler::DXC, dxcDll, shaderPath, shaderName, shaderFileName, outputPath, m_Params.disableLogs, m_Params.debugCompile));
+        // else if (m_Params.compiler == "gdk.scarlett.x64")
+        //     m_Compiler = std::unique_ptr<HLSLCompiler>(new HLSLCompiler(
+        //         HLSLCompiler::GDK_SCARLETT_X64, dxcDll, shaderPath, shaderName, shaderFileName, outputPath, m_Params.disableLogs, m_Params.debugCompile));
+        // else if (m_Params.compiler == "gdk.xboxone.x64")
+        //     m_Compiler = std::unique_ptr<HLSLCompiler>(new HLSLCompiler(
+        //         HLSLCompiler::GDK_XBOXONE_X64, dxcDll, shaderPath, shaderName, shaderFileName, outputPath, m_Params.disableLogs, m_Params.debugCompile));
+        // else if (m_Params.compiler == "fxc")
+        //     m_Compiler = std::unique_ptr<HLSLCompiler>(
+        //         new HLSLCompiler(HLSLCompiler::FXC, d3dDll, shaderPath, shaderName, shaderFileName, outputPath, m_Params.disableLogs, m_Params.debugCompile));
+        if (m_Params.compiler == "glslang")
             m_Compiler = std::unique_ptr<GLSLCompiler>(new GLSLCompiler(glslangExe, shaderPath, shaderName, shaderFileName, outputPath, m_Params.disableLogs, m_Params.debugCompile));
         else
             throw std::runtime_error("Unknown compiler requested (valid options: dxc, fxc or glslang)");
@@ -589,15 +539,15 @@ void Application::OpenSourceFile()
     for (size_t i = 0; i < m_Params.compilerArgs.size(); i++)
     {
         auto& arg = m_Params.compilerArgs[i];
-        if (arg == L"-I" && i + 1 < m_Params.compilerArgs.size())
+        if (arg == "-I" && i + 1 < m_Params.compilerArgs.size())
         {
             includeSearchPaths.emplace_back(m_Params.compilerArgs[++i]);
         }
-        else if (StartsWith(arg, L"-I "))
+        else if (StartsWith(arg, "-I "))
         {
             includeSearchPaths.emplace_back(arg.substr(3));
         }
-        else if (StartsWith(arg, L"-I"))
+        else if (StartsWith(arg, "-I"))
         {
             includeSearchPaths.emplace_back(arg.substr(2));
         }
@@ -712,11 +662,11 @@ void Application::CompilePermutation(Permutation& permutation)
     // ------------------------------------------------------------------------------------------------
     std::vector<std::string> args = {};
 
-    for (const std::wstring& arg : permutation.defines)
-        args.push_back(WCharToUTF8(arg));
+    for (const std::string& arg : permutation.defines)
+        args.push_back(arg);
 
-    for (const std::wstring& arg : m_Params.compilerArgs)
-        args.push_back(WCharToUTF8(arg));
+    for (const std::string& arg : m_Params.compilerArgs)
+        args.push_back(arg);
 
     // ------------------------------------------------------------------------------------------------
     // Print compiler args if requested.
@@ -775,14 +725,14 @@ void Application::CompilePermutation(Permutation& permutation)
 
 void Application::WriteShaderBinaryHeader(Permutation& permutation)
 {
-    std::string  permutationName = WCharToUTF8(m_ShaderName) + "_" + permutation.hashDigest;
-    std::wstring headerFileName  = UTF8ToWChar(permutationName) + L".h";
+    std::string permutationName = m_ShaderName + "_" + permutation.hashDigest;
+    std::string headerFileName  = permutationName + ".h";
 
     FILE* fp = NULL;
 
-    std::wstring outputPath = MakeFullPath(m_Params.ouputPath, headerFileName);
+    std::string outputPath = MakeFullPath(m_Params.ouputPath, headerFileName);
 
-    _wfopen_s(&fp, outputPath.c_str(), L"wb");
+    fp = fopen(outputPath.c_str(), "wb");
 
     // ------------------------------------------------------------------------------------------------
     // Write autogen comment
@@ -797,7 +747,7 @@ void Application::WriteShaderBinaryHeader(Permutation& permutation)
     {
         for (int i = 0; i < m_Params.compilerArgs.size(); i++)
         {
-            std::string arg = WCharToUTF8(m_Params.compilerArgs[i]);
+            std::string arg = m_Params.compilerArgs[i];
 
             if (arg[0] == '-')
             {
@@ -818,7 +768,7 @@ void Application::WriteShaderBinaryHeader(Permutation& permutation)
     {
         for (int32_t i = 0; i < permutation.defines.size(); i++)
         {
-            std::string arg = WCharToUTF8(permutation.defines[i]);
+            std::string arg = permutation.defines[i];
 
             if (arg[0] == '-')
             {
@@ -874,7 +824,7 @@ void Application::PrintPermutationArguments(Permutation& permutation)
     {
         for (int i = 0; i < m_Params.compilerArgs.size(); i++)
         {
-            std::string arg = WCharToUTF8(m_Params.compilerArgs[i]);
+            std::string arg = m_Params.compilerArgs[i];
 
             printf("%s", arg.c_str());
 
@@ -890,7 +840,7 @@ void Application::PrintPermutationArguments(Permutation& permutation)
     {
         for (int32_t i = 0; i < permutation.defines.size(); i++)
         {
-            std::string arg = WCharToUTF8(permutation.defines[i]);
+            std::string arg = permutation.defines[i];
 
             printf("%s", arg.c_str());
 
@@ -899,7 +849,7 @@ void Application::PrintPermutationArguments(Permutation& permutation)
         }
     }
 
-    std::string outputPath = WCharToUTF8(m_Params.ouputPath);
+    std::string outputPath = m_Params.ouputPath;
 
     printf("-output=%s", outputPath.c_str());
 
@@ -913,13 +863,13 @@ void Application::WriteShaderPermutationsHeader()
     if (m_UniquePermutations.empty())
         throw std::runtime_error("No shader permutations generated due to errors!");
 
-    std::string shaderName = WCharToUTF8(m_ShaderName);
+    std::string shaderName = m_ShaderName;
 
     FILE* fp = NULL;
 
-    std::wstring outputPath = MakeFullPath(m_Params.ouputPath, m_ShaderName + L"_permutations.h");
+    std::string outputPath = MakeFullPath(m_Params.ouputPath, m_ShaderName + "_permutations.h");
 
-    _wfopen_s(&fp, outputPath.c_str(), L"wb");
+    fp = fopen(outputPath.c_str(), "wb");
 
     // ------------------------------------------------------------------------------------------------
     // Write header includes
@@ -942,7 +892,7 @@ void Application::WriteShaderPermutationsHeader()
 
         if (!option.isNumeric)
         {
-            std::string enumName = WCharToUTF8(option.definition);
+            std::string enumName = option.definition;
 
             fprintf(fp, "typedef enum %s {\n", enumName.c_str());
 
@@ -950,7 +900,7 @@ void Application::WriteShaderPermutationsHeader()
             {
                 std::transform(enumName.begin(), enumName.end(), enumName.begin(), ::toupper);
 
-                std::string valueString = WCharToUTF8(option.values[j]);
+                std::string valueString = option.values[j];
                 std::transform(valueString.begin(), valueString.end(), valueString.begin(), ::toupper);
                 valueString = "OPT_" + enumName + "_" + valueString + " = " + std::to_string(j);
 
@@ -977,7 +927,7 @@ void Application::WriteShaderPermutationsHeader()
     {
         const PermutationOption& option = m_Params.permutationOptions[i];
 
-        std::string enumName = WCharToUTF8(option.definition);
+        std::string enumName = option.definition;
 
         fprintf(fp, "        uint32_t %s : %i;\n", enumName.c_str(), option.numBits);
     }
@@ -1006,7 +956,7 @@ void Application::WriteShaderPermutationsHeader()
     for (const auto& option : m_Params.permutationOptions)
         usedBits += option.numBits;
 
-    uint32_t totalPossiblePermutations = pow(2, usedBits);
+    uint32_t totalPossiblePermutations = (uint32_t) pow(float(2), float(usedBits));
 
     fprintf(fp, "static const uint32_t g_%s_IndirectionTable[] = {\n", shaderName.c_str());
 
@@ -1054,16 +1004,16 @@ void Application::DumpDepfileGCC()
         totalDependencies.insert(permutation.dependencies.begin(), permutation.dependencies.end());
     }
 
-    std::string shaderName = WCharToUTF8(m_ShaderName);
+    std::string shaderName = m_ShaderName;
 
     FILE* fp = NULL;
 
-    std::wstring outputFilename = MakeFullPath(m_Params.ouputPath, m_ShaderName + L"_permutations.h");
-    std::wstring depfilePath = outputFilename + L".d";
+    std::string outputFilename = MakeFullPath(m_Params.ouputPath, m_ShaderName + "_permutations.h");
+    std::string depfilePath = outputFilename + ".d";
 
-    _wfopen_s(&fp, depfilePath.c_str(), L"wb");
+    fp = fopen(depfilePath.c_str(), "wb");
 
-    fs::path output = WCharToUTF8(outputFilename);
+    fs::path output = outputFilename;
 
     output = fs::absolute(output);
 
@@ -1084,7 +1034,7 @@ void Application::DumpDepfileMSVC()
     printf("MSVC depfile not implemented yet.\n");
 }
 
-int wmain(int argc, wchar_t** argv)
+int main(int argc, char** argv)
 {
     try
     {
diff --git a/sdk/tools/ffx_shader_compiler/src/glsl_compiler.cpp b/sdk/tools/ffx_shader_compiler/src/glsl_compiler.cpp
index 532b192..6c4a835 100644
--- a/sdk/tools/ffx_shader_compiler/src/glsl_compiler.cpp
+++ b/sdk/tools/ffx_shader_compiler/src/glsl_compiler.cpp
@@ -23,8 +23,8 @@
 #include "glsl_compiler.h"
 #include "utils.h"
 
-#include <md5.h>
-#include <spirv_reflect.h>
+#include "../libs/MD5/md5.h"
+#include "../libs/SPIRV-Reflect/spirv_reflect.h"
 
 std::string MD5HashString(unsigned char* sig)
 {
@@ -74,7 +74,7 @@ GLSLCompiler::GLSLCompiler(const std::string& glslangExe,
                            bool               disableLogs,
                            bool               debugCompile)
     : ICompiler(shaderPath, shaderName, shaderFileName, outputPath, disableLogs, debugCompile)
-    , m_GlslangExe(glslangExe.empty() ? "glslangValidator.exe" : glslangExe)
+    , m_GlslangExe(glslangExe.empty() ? "glslangValidator" : glslangExe)
 {
     fs::create_directory(m_OutputPath + "/" + m_ShaderName + "_temp");
 }
@@ -251,13 +251,15 @@ bool GLSLCompiler::GLSLCompiler::Compile(Permutation& permutation, const std::ve
                         token.erase(0, end + 2);
                     }
                 }
-                token.pop_back();
-                errors.push_back(ErrorData{token, lineNumber});
+                errors.push_back(ErrorData{std::move(token), lineNumber});
             }
         }
     };
 
-    tpl::Process process(cmdLine, "", func, func);
+    tpl::Config config{};
+    config.buffer_size = 512 * 1024;
+
+    tpl::Process process(cmdLine, "", func, func, false, config);
 
     bool succeeded = process.get_exit_status() == 0;
 
@@ -265,7 +267,7 @@ bool GLSLCompiler::GLSLCompiler::Compile(Permutation& permutation, const std::ve
     {
         writeMutex.lock();
 
-        fprintf(stderr, "%s[%lu]\n", m_ShaderFileName.c_str(), permutation.key);
+        fprintf(stderr, "%s[%lu]\n", m_ShaderFileName.c_str(), (unsigned long) permutation.key);
 
         for (size_t i = 1; i < errors.size(); i++)
         {
diff --git a/sdk/tools/ffx_shader_compiler/src/pch.hpp b/sdk/tools/ffx_shader_compiler/src/pch.hpp
index c017698..fa0ea59 100644
--- a/sdk/tools/ffx_shader_compiler/src/pch.hpp
+++ b/sdk/tools/ffx_shader_compiler/src/pch.hpp
@@ -24,10 +24,10 @@
 
 #define NOMINMAX
 #define WIN32_LEAN_AND_MEAN
-#include <Windows.h>
-#include <atlcomcli.h>
-#include <dxcapi.h>
-#include <d3dcompiler.h>
+// #include <Windows.h>
+// #include <atlcomcli.h>
+// #include <dxcapi.h>
+// #include <d3dcompiler.h>
 #include <assert.h>
 #include <stdio.h>
 #include <exception>
@@ -44,7 +44,7 @@
 #include <iostream>
 #include <algorithm>
 #include <fstream>
-#include <d3d12shader.h>
+// #include <d3d12shader.h>
 
 #include <filesystem>
 namespace fs = std::filesystem;
diff --git a/sdk/tools/ffx_shader_compiler/src/utils.h b/sdk/tools/ffx_shader_compiler/src/utils.h
index ff57b45..17da3c2 100644
--- a/sdk/tools/ffx_shader_compiler/src/utils.h
+++ b/sdk/tools/ffx_shader_compiler/src/utils.h
@@ -23,7 +23,7 @@
 #pragma once
 
 #include "pch.hpp"
-#include "DXBCChecksum.h"
+// #include "DXBCChecksum.h"
 
 std::string WCharToUTF8(const std::wstring& wstr);
 std::wstring UTF8ToWChar(const std::string& str);
